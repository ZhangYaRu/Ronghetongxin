package com.zhbd.beidoucommunication.ui.activity;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.AudioRecord;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.RequiresApi;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.RelativeLayout;

import com.zhbd.beidoucommunication.R;
import com.zhbd.beidoucommunication.adapter.ChatMsgAdapter;
import com.zhbd.beidoucommunication.base.TitlebarActivity;
import com.zhbd.beidoucommunication.config.Constants;
import com.zhbd.beidoucommunication.db.DatabaseDao;
import com.zhbd.beidoucommunication.domain.BaseMessage;
import com.zhbd.beidoucommunication.domain.CommonMessage;
import com.zhbd.beidoucommunication.domain.Friend;
import com.zhbd.beidoucommunication.domain.Group;
import com.zhbd.beidoucommunication.domain.ReceiverMessage;
import com.zhbd.beidoucommunication.http.NetWorkUtil;
import com.zhbd.beidoucommunication.utils.CommUtil;
import com.zhbd.beidoucommunication.utils.DataProcessingUtil;
import com.zhbd.beidoucommunication.utils.SharedPrefUtil;
import com.zhbd.beidoucommunication.utils.ToastUtils;
import com.zhbd.beidoucommunication.view.AudioRecorderButton;

import java.io.File;
import java.io.FileInputStream;
import java.io.Serializable;
import java.util.ArrayList;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

public class ChatMessageActivity extends TitlebarActivity {

    @Bind(R.id.chat_listview)
    ListView mListView;
    // 消息输入框
    @Bind(R.id.et_sendmessage)
    EditText mEtContent;
    // 跟布局
    @Bind(R.id.send_msg_rootview)
    RelativeLayout mRootView;
    // 发送按钮
    @Bind(R.id.btn_send)
    Button mBtnSend;
    // 更多按钮
    @Bind(R.id.btn_more)
    Button mBtnMore;
    // 按住说话
    @Bind(R.id.btn_audio_recorder)
    AudioRecorderButton mAudaoRecorder;
    // 语音切换按钮
    @Bind(R.id.btn_set_mode_voice)
    Button mBtnVoice;
    // 键盘切换按钮
    @Bind(R.id.btn_set_mode_keyboard)
    Button mBtnKeyBoard;

    private Friend friend;
    private Group group;
    private boolean isGroupMsg;

    private DatabaseDao dao;

    private int rowid;

    ArrayList<BaseMessage> mList = new ArrayList<>();

    /**
     * 注册广播接受者,接收消息并显示到界面
     */
    public BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            // 接收到数据库行号
            if (Constants.RECEIVE_ROWID_ACTION.equals(action)) {
                rowid = intent.getIntExtra("rowid", 0);
                // 文字消息反馈信息
            } else if (Constants.ACTION_TEXT_MESSAGE_FEEKBACK.equals(action)) {
                byte def = -1;
                byte sendState = intent.getByteExtra("sendState", def);
                int lines = dao.updateStateByRowId(rowid, sendState);
                // 修改成功,发送成功
                if (lines > 0 && sendState == DataProcessingUtil.TEXT_MSG_SEND_FEEDBACK_SUCCESS) {
                    ToastUtils.showToast(ChatMessageActivity.this,
                            getResources().getString(R.string.send_success));
                } else {
                    ToastUtils.showToast(ChatMessageActivity.this,
                            getResources().getString(R.string.send_failure));
                }
                // 接收到文字消息
            } else if (Constants.RECEIVE_MSG_UPDATEUI_ACTION.equals(action)) {
                ReceiverMessage msg = (ReceiverMessage) intent.getSerializableExtra("receiverMsg");
                //if (msg.getSenderUserId() == friend.getUserId()) {
                CommonMessage commonMessage = new CommonMessage();
                commonMessage.setSenderNumber(msg.getSenderUserId());
                commonMessage.setContent(msg.getContent());
                commonMessage.setSenderName(friend.getName());
                commonMessage.setType(Constants.MESSAGE_TYPE_TEXT);
                commonMessage.setIsRead(Constants.MESSAGE_HAVE_READ);
                commonMessage.setTime(CommUtil.getDate());
                commonMessage.setStatus(Constants.MESSAGE_STATE_RECEIVER);
                // 添加消息到数据库
                dao.addDataToMessage(commonMessage);
                Log.e("error", "aaaa:" + commonMessage.getContent());
                // 更新界面
                refreshListView();
                //}
            }
//            } else {
//                // 判断页面时群组消息的页面还是普通消息页面
//                Serializable receive = intent.getSerializableExtra("receive");
//                if (isGroupMsg) {
//                    // 避免强转出异常
//                    if (receive instanceof DBGroupMessage) {
//                        DBGroupMessage groupMessage = (DBGroupMessage) receive;
//                        // 判断如果收到的消息中的号码是当前页面的号码,就显示
//                        if (groupMessage.group_number == number) {
//                            mDataArrays.add(groupMessage);
//                        }
//                    }
//                } else {
//                    if (receive instanceof DBMessage) {
//                        DBMessage dbMessage = (DBMessage) receive;
//                        if (dbMessage.com_user_number == number) {
//                            mDataArrays.add(dbMessage);
//                        }
//                    }
//                }
//            }
//            // 通知ListView，数据已发生改变
//            mAdapter.notifyDataSetChanged();
//            mListView.setSelection(mDataArrays.size() - 1);
            //refreshListView();
        }
    };
    private ChatMsgAdapter mAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setLayoutRes(R.layout.activity_chat_message);
        // 以下为测试数据
        friend = new Friend();
        friend.setUserId(230626);
        friend.setName("乌拉拉");
        friend.setPhoneNumber("15147858652");
        friend.setIdCard("152826199212060068");
        friend.setSimNumber("222222555558889");// 开启服务,全局接收消息
//        Intent serviceIntent = new Intent();
//        serviceIntent.setAction("com.zhbd.beidoucommunication.service.GlobalService");
//        serviceIntent.setPackage(getPackageName());
//        startService(serviceIntent);
        // 测试数据结束
        initView();
        initData();
    }

    @Override
    protected void onStart() {
        super.onStart();
        setKeyboardLoc(mRootView);
    }

    private void initView() {
        ButterKnife.bind(this);
        // 设置标题栏
        setTitleText(friend.getName());
        setLeftText(R.string.main_button_message, true);
        setLeftIcon(R.drawable.back_arrow, true);
        setRightIcon(0, false);
        setRightText(0, false);

        // 用于键盘的隐藏和显示
        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);

        //监听输入框的文本改变事件,友好的向用户提示文字超长
        mEtContent.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // 内容不为空, 显示发送按钮,为空,隐藏发送按钮
                if (CommUtil.isEmpty(s.toString())) {
                    mBtnMore.setVisibility(View.VISIBLE);
                    mBtnSend.setVisibility(View.GONE);
                    return;
                } else {
                    mBtnMore.setVisibility(View.GONE);
                    mBtnSend.setVisibility(View.VISIBLE);
                }
                // 判断文字达到长度不能再输入
                if (s.length() > 30) {
                    ToastUtils.showToast(ChatMessageActivity.this,
                            getResources().getString(R.string.content_overlength));

                }
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });

        /**
         * 语音完成的回调
         */
        mAudaoRecorder.setAudioFinishRecorderListener(new AudioRecorderButton.AudioFinishRecorderListener() {
            @Override
            public void onFinish(float seconds, String filePath) {
                // 把数据填充到对象
                CommonMessage msg = new CommonMessage();
                msg.setSenderNumber(friend.getUserId());
                msg.setSenderName(friend.getName());
                msg.setContent(filePath);
                msg.setTime(CommUtil.getDate());
                // 秒数四舍五入
                msg.setSecond(Math.round(seconds));
                // 状态默认为失败, 得到反馈后再更新
                msg.setStatus(Constants.MESSAGE_STATE_SEND_FAILURE);
                msg.setType(Constants.MESSAGE_TYPE_VOICE);
                msg.setIsRead(Constants.MESSAGE_HAVE_READ);

                // 加入集合
                mList.add(msg);
                // 存储到数据库
                dao.addDataToMessage(msg);
                // 发送消息
                // 封装发送数据,参数依次为,消息内容,目的地ic卡号,业务标识,当前可用的
                DataProcessingUtil.voiceMsgDataPackage(seconds, filePath, false, false);

//                // 文件总字节数
//                long fileSizes = 0;
//                // 压缩文件
//                File spxFile = null;
//                // 单包长度
//                int packageLen = 0;
//                // 包计数
//                int count = 0;
//                // 业务标识
//                byte businessSign = 0;
//                try {
//                    // 需要发送的文件是同名的.spx文件
//                    String fileName = filePath.substring(filePath.lastIndexOf('/') + 1, filePath.lastIndexOf('.'));
//                    String path = filePath.substring(0, filePath.lastIndexOf('/'));
//                    spxFile = new File(path + "/" + fileName + ".spx");
//                    spxFilePath = spxFile.getAbsolutePath();
//                    fileSizes = ParseDataUtils.getFileSizes(spxFile);
//                    count = (int) (fileSizes / 70) + 1;
//                    //Log.e("error", "sendMsgActivity.onFinish().path:" + path + "/" + fileName + ".spx");
//                    FileInputStream fis = new FileInputStream(spxFile);
//                    byte[] buffer = new byte[70];
//                    int read = 0;
//                    //Log.e("sendMsgAcitvity", "fileSizes:" + fileSizes);
//                    while ((read = fis.read(buffer)) != -1) {
//                        packageLen = read;
//                        // 最后一包
//                        if (read < 70) {
//                            businessSign = ParseDataUtils.businessSign(false, true, count);
//                        } else {
//                            // 非最后一包
//                            businessSign = ParseDataUtils.businessSign(false, false, count);
//                        }
//                        // 连接网络并发送数据
//                        byte[] data = ParseDataUtils.TXSQ_VOICE_DC(buffer, number, businessSign,
//                                usableIcNumber, msg.second_num, packageLen, count);
//                        NetWorkUtils.connectUDP(data);
//                        //Log.e("sendMsgAcitvity", "packageLen:" + packageLen);
//                        //Log.e("sendMsgAcitvity", "count:" + count);
//                    }
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//
//            }
//            //发送数据后把信息记录到数据库
//            // 更新界面
//                    mAdapter.notifyDataSetChanged();
//                    mListView.setSelection(mDataArrays.size()-1);
//            }
            }
        });
//}
    }

    private void initData() {
        // 获取传来的好友信息
        Serializable instance = getIntent().getSerializableExtra("instance");
        // 群组信息
        if (instance instanceof Group) {
            isGroupMsg = true;
            this.group = (Group) instance;
            // 好友信息
        } else {
            isGroupMsg = false;
            //this.friend = (Friend) instance;
        }
        int myUserId = SharedPrefUtil.getInt(this, Constants.USER_ID, 0);
        // 数据库中查找消息,初始化界面
        dao = DatabaseDao.getInstance(this, myUserId);
        if (isGroupMsg) {
//            mList = dao.queryGroupMessageByGroupId();
        } else {
            mList.addAll(dao.queryCommonMessageByUserId(friend.getUserId()));
        }

        mAdapter = new ChatMsgAdapter(this, mList);
        mListView.setAdapter(mAdapter);

        // 注册广播接收者
        IntentFilter filter = new IntentFilter();
        // 接收新消息action
        filter.addAction(Constants.RECEIVE_MSG_UPDATEUI_ACTION);
        // 接收文字消息反馈的action
        filter.addAction(Constants.ACTION_TEXT_MESSAGE_FEEKBACK);
        // 接收群号action
        filter.addAction(Constants.RECEIVE_GROUPNUMBER_UPDATEUI_ACTION);
        // 接收数据库rowid  action
        filter.addAction(Constants.RECEIVE_ROWID_ACTION);
        registerReceiver(mReceiver, filter);
    }

    @OnClick(R.id.btn_set_mode_voice)
    public void setModeVoice() {
        // 语音按钮隐藏
        mBtnVoice.setVisibility(View.GONE);
        // 键盘按钮显示
        mBtnKeyBoard.setVisibility(View.VISIBLE);
        //显示软键盘
        imm.showSoftInputFromInputMethod(mAudaoRecorder.getWindowToken(), 0);
        mAudaoRecorder.setVisibility(View.GONE);
        mEtContent.setVisibility(View.VISIBLE);
    }


    @OnClick(R.id.btn_send)
    public void send() {
        // 获取消息内容
        String contString = mEtContent.getText().toString();
        // 判断单播或组播
        int length = contString.length();
        if (length > 0 && length <= 70) {
            mEtContent.setText("");
            //封装要发送的数据
            // 判断是群组消息
            if (isGroupMsg) {
                // 封装发送数据


                // 普通消息
            } else {
                // 封装发送数据
                CommonMessage msg = new CommonMessage();
                msg.setSenderNumber(friend.getUserId());
                msg.setSenderName(friend.getName());
                msg.setTime(CommUtil.getDate());
                msg.setContent(contString);
                msg.setType(Constants.MESSAGE_TYPE_TEXT);
                msg.setIsRead(Constants.MESSAGE_HAVE_READ);
                // id放到数据库后才明确,状态要在得到反馈后明确
                // 信息存入数据库
                boolean isSuccess = dao.addDataToMessage(msg);
                // 判断是否添加成功
                if (isSuccess) {
                    msg.set_id(rowid);
                } else {
                    ToastUtils.showToast(this, getResources().getString(R.string.server_error));
                    return;
                }
                // 组合数据
                byte[] result = DataProcessingUtil.textMsgDataPackage(msg, false, false);
                // 连接网络并发送数据
                NetWorkUtil.connectServerWithTCPSocket(result);
            }
            // 更新界面
            refreshListView();
        }
    }

    /**
     * 重新填充集合,更新界面
     */
    private void refreshListView() {
        mList.clear();
        mList.addAll(dao.queryCommonMessageByUserId(friend.getUserId()));
        mAdapter.notifyDataSetChanged();
    }

    /**
     * 判断点击的是否是EditText区域
     *
     * @param v
     * @param event
     * @return
     */
    public boolean isShouldHideInput(View v, MotionEvent event) {
        if (v != null && (v instanceof EditText)) {
            int[] leftTop = {0, 0};
            //获取输入框当前的location位置
            v.getLocationInWindow(leftTop);
            int left = leftTop[0];
            int top = leftTop[1];
            int bottom = top + v.getHeight();
            int right = left + v.getWidth();
            if (event.getX() > left && event.getX() < right
                    && event.getY() > top && event.getY() < bottom) {
                // 点击的是输入框区域，保留点击EditText的事件
                return false;
            } else {
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {
        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
            View v = getCurrentFocus();
            if (isShouldHideInput(v, ev)) {

                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                if (imm != null) {
                    imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
                }
            } else {
                //mListView.setSelection(mList.size()-1);
            }
            return super.dispatchTouchEvent(ev);
        }
        // 必不可少，否则所有的组件都不会有TouchEvent了
        if (getWindow().superDispatchTouchEvent(ev)) {
            return true;
        }
        return onTouchEvent(ev);
    }


    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)
    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(mReceiver);
        if (dao != null) {
            dao.close();
        }
    }
}
